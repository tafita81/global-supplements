-- Insert sample data for new tables to complete the system

-- Insert opportunity-supplier relationships
INSERT INTO public.opportunity_suppliers (opportunity_id, supplier_id, quoted_price, lead_time_days, minimum_order_quantity, quote_valid_until, supplier_notes, status) 
SELECT 
  o.id as opportunity_id,
  s.id as supplier_id,
  (o.estimated_value * 0.6)::numeric(10,2) as quoted_price,
  CASE 
    WHEN s.country = 'China' THEN 21
    WHEN s.country = 'USA' THEN 7
    ELSE 14
  END as lead_time_days,
  CASE 
    WHEN o.product_name LIKE '%25kg%' THEN 500
    WHEN o.product_name LIKE '%10kg%' THEN 200
    WHEN o.product_name LIKE '%50kg%' THEN 100
    ELSE 1000
  END as minimum_order_quantity,
  NOW() + INTERVAL '30 days' as quote_valid_until,
  'Verified supplier with excellent track record' as supplier_notes,
  'active' as status
FROM public.opportunities o
CROSS JOIN public.suppliers s
WHERE 
  (o.product_name LIKE '%Protein%' AND s.category = 'protein-powders') OR
  (o.product_name LIKE '%Spirulina%' AND s.category = 'organic-supplements') OR
  (o.product_name LIKE '%Collagen%' AND s.category = 'marine-collagen') OR
  (o.product_name LIKE '%Omega%' AND s.category = 'fish-oil')
LIMIT 8;

-- Insert sample orders
INSERT INTO public.orders (opportunity_id, supplier_id, status, quantity, unit_price, total_amount, profit_margin, order_date, delivery_date, tracking_info, payment_status, notes)
SELECT 
  os.opportunity_id,
  os.supplier_id,
  CASE 
    WHEN RANDOM() < 0.3 THEN 'delivered'
    WHEN RANDOM() < 0.6 THEN 'shipped'
    WHEN RANDOM() < 0.8 THEN 'confirmed'
    ELSE 'pending'
  END as status,
  os.minimum_order_quantity as quantity,
  os.quoted_price as unit_price,
  (os.minimum_order_quantity * os.quoted_price)::numeric(12,2) as total_amount,
  ((1 - (os.quoted_price / o.estimated_value)) * 100)::numeric(5,2) as profit_margin,
  NOW() - (RANDOM() * INTERVAL '30 days') as order_date,
  NOW() + (RANDOM() * INTERVAL '15 days') as delivery_date,
  jsonb_build_object(
    'carrier', CASE WHEN s.country = 'China' THEN 'DHL Express' ELSE 'FedEx' END,
    'tracking_number', 'TRK' || FLOOR(RANDOM() * 1000000)::text,
    'estimated_delivery', NOW() + (RANDOM() * INTERVAL '15 days')
  ) as tracking_info,
  CASE 
    WHEN RANDOM() < 0.7 THEN 'paid'
    WHEN RANDOM() < 0.9 THEN 'pending'
    ELSE 'failed'
  END as payment_status,
  'Automated order generated by AI system' as notes
FROM public.opportunity_suppliers os
JOIN public.opportunities o ON os.opportunity_id = o.id
JOIN public.suppliers s ON os.supplier_id = s.id
LIMIT 5;

-- Insert execution history records
INSERT INTO public.execution_history (entity_type, entity_id, action_type, action_details, executed_by, execution_status, result_data, execution_time_ms)
SELECT 
  'opportunity' as entity_type,
  id as entity_id,
  'opportunity_detected' as action_type,
  jsonb_build_object(
    'source', source,
    'product', product_name,
    'estimated_value', estimated_value,
    'detection_method', 'ai_scanner'
  ) as action_details,
  'ai_agent' as executed_by,
  'completed' as execution_status,
  jsonb_build_object(
    'success', true,
    'confidence_score', 0.85 + (RANDOM() * 0.15),
    'processing_time', '2.3s'
  ) as result_data,
  (1500 + RANDOM() * 3000)::numeric(8,2) as execution_time_ms
FROM public.opportunities
LIMIT 10;

-- Insert market analysis data
INSERT INTO public.market_analysis (product_category, market_region, market_size_usd, growth_rate_percent, competition_level, price_trends, demand_forecast, key_insights, data_sources, confidence_score)
VALUES 
('Health Supplements', 'North America', 45000000000, 8.2, 'high', 
 '{"trend": "increasing", "quarterly_growth": [5.2, 7.1, 8.8, 9.3]}',
 '{"next_quarter": "strong", "seasonal_factors": ["Q4 wellness trends", "New Year resolutions"]}',
 ARRAY['Growing consumer health awareness', 'Aging population driving demand', 'E-commerce expansion'],
 ARRAY['IBISWorld', 'Euromonitor', 'Nielsen', 'Grand View Research'],
 92),
('Organic Foods', 'Global', 125000000000, 12.8, 'medium',
 '{"trend": "rapidly_increasing", "premium_pricing": true}',
 '{"next_quarter": "very_strong", "organic_certification_demand": "increasing"}',
 ARRAY['Sustainability focus increasing', 'Premium pricing acceptable to consumers', 'Supply chain challenges'],
 ARRAY['Organic Trade Association', 'FiBL', 'Research and Markets'],
 88),
('Marine Supplements', 'Europe', 8500000000, 15.3, 'low',
 '{"trend": "emerging", "innovation_driven": true}',
 '{"next_quarter": "strong", "regulatory_support": "increasing"}',
 ARRAY['Sustainable sourcing becoming key differentiator', 'Nordic countries leading innovation'],
 ARRAY['Marine Biotechnology', 'European Commission', 'Frost & Sullivan'],
 85);

-- Insert viral campaigns for Mycogenesis products
INSERT INTO public.viral_campaigns (product_id, campaign_name, campaign_type, target_audience, budget_usd, start_date, end_date, status, performance_metrics, roi_percent)
SELECT 
  id as product_id,
  name || ' Launch Campaign' as campaign_name,
  CASE 
    WHEN RANDOM() < 0.25 THEN 'social_media'
    WHEN RANDOM() < 0.5 THEN 'influencer'
    WHEN RANDOM() < 0.75 THEN 'content_marketing'
    ELSE 'paid_ads'
  END as campaign_type,
  jsonb_build_object(
    'age_range', '25-45',
    'interests', ARRAY['health', 'wellness', 'supplements', 'fitness'],
    'demographics', 'health-conscious consumers'
  ) as target_audience,
  (50000 + RANDOM() * 200000)::numeric(10,2) as budget_usd,
  NOW() - (RANDOM() * INTERVAL '60 days') as start_date,
  NOW() + (RANDOM() * INTERVAL '90 days') as end_date,
  CASE 
    WHEN RANDOM() < 0.4 THEN 'active'
    WHEN RANDOM() < 0.6 THEN 'completed'
    WHEN RANDOM() < 0.8 THEN 'paused'
    ELSE 'draft'
  END as status,
  jsonb_build_object(
    'impressions', FLOOR(RANDOM() * 1000000 + 100000),
    'clicks', FLOOR(RANDOM() * 50000 + 5000),
    'conversions', FLOOR(RANDOM() * 2000 + 200),
    'ctr', ROUND((RANDOM() * 0.05 + 0.01)::numeric, 4)
  ) as performance_metrics,
  (RANDOM() * 200 + 50)::numeric(5,2) as roi_percent
FROM public.mycogenesis_products;

-- Insert notifications
INSERT INTO public.notifications (notification_type, title, message, priority, entity_type, entity_id, read_status, action_required, action_url)
VALUES 
('opportunity_alert', 'New High-Value Opportunity Detected', 'AI detected a $25K opportunity in Government Nutrition sector with 52% margin potential', 'high', 'opportunity', (SELECT id FROM opportunities WHERE product_name LIKE '%Collagen%' LIMIT 1), false, true, '/opportunities'),
('compliance_warning', 'Compliance Check Required', 'Product safety verification needed for Whey Protein Isolate shipment', 'medium', 'opportunity', (SELECT id FROM opportunities WHERE product_name LIKE '%Whey%' LIMIT 1), false, true, '/compliance'),
('system_success', 'Order Successfully Executed', 'Automated order placed with Nordic Marine Products - tracking initiated', 'low', 'order', (SELECT id FROM orders LIMIT 1), true, false, '/logistics'),
('market_insight', 'Market Analysis Update', 'Marine supplements market showing 15.3% growth - excellent arbitrage potential', 'medium', 'market_analysis', (SELECT id FROM market_analysis WHERE product_category = 'Marine Supplements' LIMIT 1), false, false, '/market-intelligence'),
('campaign_alert', 'Viral Campaign Performance Alert', 'MycoBoost campaign exceeding 150% ROI target - consider budget increase', 'high', 'viral_campaign', (SELECT id FROM viral_campaigns LIMIT 1), false, true, '/mycogenesis');

-- Update existing mycogenesis products to reference viral campaigns
UPDATE public.mycogenesis_products 
SET viral_campaigns = jsonb_build_object(
  'active_campaigns', 1,
  'total_budget', (SELECT budget_usd FROM viral_campaigns WHERE product_id = mycogenesis_products.id LIMIT 1),
  'current_roi', (SELECT roi_percent FROM viral_campaigns WHERE product_id = mycogenesis_products.id LIMIT 1)
)
WHERE id IN (SELECT DISTINCT product_id FROM viral_campaigns);